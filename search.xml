<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MongoDB的简单介绍</title>
    <url>/2020/03/14/MongoDB%E7%9A%84%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<p>首先将下载好的文件夹的bin目录添加到系统环境变量中</p>
<p><img src="https://s1.ax1x.com/2020/03/14/81S88f.png" alt="81S88f.png"></p>
<p>在cmd命令行里输入 <strong>mongo</strong> 测试连接</p>
<p><img src="https://s1.ax1x.com/2020/03/14/81Sgr4.png" alt="81Sgr4.png"><br><strong>mongo</strong> 适用于本地连接MongoDB， MongoDB的<strong>默认端口号是27017</strong>。</p>
<h5 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db</span><br><span class="line">test</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
<p>此命令返回的是MongoDB默认的数据库<strong>test</strong>，下面是返回全部数据库的命令。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; show databases;</span><br><span class="line">Qianyi_Zhang_lab6  0.000GB</span><br><span class="line">admin              0.000GB</span><br><span class="line">config             0.000GB</span><br><span class="line">local              0.000GB</span><br><span class="line">students           0.000GB</span><br><span class="line">test               0.000GB</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<h5 id="切换数据库"><a href="#切换数据库" class="headerlink" title="切换数据库"></a>切换数据库</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; use test</span><br><span class="line">switched to db test</span><br><span class="line">&gt; use students</span><br><span class="line">switched to db students</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<h5 id="插入一条数据"><a href="#插入一条数据" class="headerlink" title="插入一条数据"></a>插入一条数据</h5><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/insert-methods/" target="_blank" rel="noopener">Insert Methods</a><br>The <strong>db.myCollection.insertOne()</strong> 是 mongo shell 中的一种方法。  </p>
<ul>
<li>db：是当前的数据库</li>
<li>myCollection：当前的collection名字                      </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; use myNewDatabase</span><br><span class="line">switched to db myNewDatabase</span><br><span class="line">&gt; db.myCollection.insertOne(&#123;x:1&#125;);</span><br><span class="line">&#123;</span><br><span class="line">        &quot;acknowledged&quot; : true,</span><br><span class="line">        &quot;insertedId&quot; : ObjectId(&quot;5e6d1ff57ea55eb9ea1ab738&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt; db.myCollection.insertOne(&#123;x:2, y:3&#125;);</span><br><span class="line">&#123;</span><br><span class="line">        &quot;acknowledged&quot; : true,</span><br><span class="line">        &quot;insertedId&quot; : ObjectId(&quot;5e6d203d7ea55eb9ea1ab739&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<p>MongoDB Compass展示数据库：</p>
<p><img src="https://s1.ax1x.com/2020/03/15/81KET0.png" alt="81KET0.png"></p>
<h5 id="插入多条数据"><a href="#插入多条数据" class="headerlink" title="插入多条数据"></a>插入多条数据</h5><p>使用 <strong>db.collection.insertMany()</strong> 方法向inventory collection插入多个新文档（documents）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.inventory.insertMany([</span><br><span class="line">...    &#123; item: &quot;journal&quot;, qty: 25, status: &quot;A&quot;, size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;, tags: [ &quot;blank&quot;, &quot;red&quot; ] &#125;,</span><br><span class="line">...    &#123; item: &quot;notebook&quot;, qty: 50, status: &quot;A&quot;, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, tags: [ &quot;red&quot;, &quot;blank&quot; ] &#125;,</span><br><span class="line">...    &#123; item: &quot;paper&quot;, qty: 10, status: &quot;D&quot;, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, tags: [ &quot;red&quot;, &quot;blank&quot;, &quot;plain&quot; ] &#125;,</span><br><span class="line">...    &#123; item: &quot;planner&quot;, qty: 0, status: &quot;D&quot;, size: &#123; h: 22.85, w: 30, uom: &quot;cm&quot; &#125;, tags: [ &quot;blank&quot;, &quot;red&quot; ] &#125;,</span><br><span class="line">...    &#123; item: &quot;postcard&quot;, qty: 45, status: &quot;A&quot;, size: &#123; h: 10, w: 15.25, uom: &quot;cm&quot; &#125;, tags: [ &quot;blue&quot; ] &#125;</span><br><span class="line">... ]);</span><br><span class="line">&#123;</span><br><span class="line">        &quot;acknowledged&quot; : true,</span><br><span class="line">        &quot;insertedIds&quot; : [</span><br><span class="line">                ObjectId(&quot;5e6d2361c5e27d91ace112fe&quot;),</span><br><span class="line">                ObjectId(&quot;5e6d2361c5e27d91ace112ff&quot;),</span><br><span class="line">                ObjectId(&quot;5e6d2361c5e27d91ace11300&quot;),</span><br><span class="line">                ObjectId(&quot;5e6d2361c5e27d91ace11301&quot;),</span><br><span class="line">                ObjectId(&quot;5e6d2361c5e27d91ace11302&quot;)</span><br><span class="line">        ]</span><br><span class="line">&#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<p>MongoDB Compass展示数据库：</p>
<p><img src="https://s1.ax1x.com/2020/03/15/81M9N6.png" alt="81M9N6.png">   </p>
<p>其中一个对象的完整内容：  </p>
<p><img src="https://s1.ax1x.com/2020/03/15/81MC4K.png" alt="81MC4K.png"></p>
<h5 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h5><p>数据库内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.inventory.insertMany([</span><br><span class="line">   &#123; item: &quot;journal&quot;, qty: 25, size: &#123; h: 14, w: 21, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;notebook&quot;, qty: 50, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;A&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;paper&quot;, qty: 100, size: &#123; h: 8.5, w: 11, uom: &quot;in&quot; &#125;, status: &quot;D&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;planner&quot;, qty: 75, size: &#123; h: 22.85, w: 30, uom: &quot;cm&quot; &#125;, status: &quot;D&quot; &#125;,</span><br><span class="line">   &#123; item: &quot;postcard&quot;, qty: 45, size: &#123; h: 10, w: 15.25, uom: &quot;cm&quot; &#125;, status: &quot;A&quot; &#125;</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p><img src="https://s1.ax1x.com/2020/03/15/81MQC8.png" alt="81MQC8.png"></p>
<p>查询所有数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.inventory.find(&#123;&#125;)</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11303&quot;), &quot;item&quot; : &quot;journal&quot;, &quot;qty&quot; : 25, &quot;size&quot; : &#123; &quot;h&quot; : 14, &quot;w&quot; : 21, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11304&quot;), &quot;item&quot; : &quot;notebook&quot;, &quot;qty&quot; : 50, &quot;size&quot; : &#123; &quot;h&quot; : 8.5, &quot;w&quot; : 11, &quot;uom&quot; : &quot;in&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11305&quot;), &quot;item&quot; : &quot;paper&quot;, &quot;qty&quot; : 100, &quot;size&quot; : &#123; &quot;h&quot; : 8.5, &quot;w&quot; : 11, &quot;uom&quot; : &quot;in&quot; &#125;, &quot;status&quot; : &quot;D&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11306&quot;), &quot;item&quot; : &quot;planner&quot;, &quot;qty&quot; : 75, &quot;size&quot; : &#123; &quot;h&quot; : 22.85, &quot;w&quot; : 30, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;D&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11307&quot;), &quot;item&quot; : &quot;postcard&quot;, &quot;qty&quot; : 45, &quot;size&quot; : &#123; &quot;h&quot; : 10, &quot;w&quot; : 15.25, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>

<p>按条件查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用这种格式：&#123; &lt;field1&gt;: &lt;value1&gt;, ... &#125;</span><br><span class="line"></span><br><span class="line">查询 status&#x3D;D 的数据</span><br><span class="line">&gt; db.inventory.find( &#123; status: &quot;D&quot; &#125; )</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11305&quot;), &quot;item&quot; : &quot;paper&quot;, &quot;qty&quot; : 100, &quot;size&quot; : &#123; &quot;h&quot; : 8.5, &quot;w&quot; : 11, &quot;uom&quot; : &quot;in&quot; &#125;, &quot;status&quot; : &quot;D&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11306&quot;), &quot;item&quot; : &quot;planner&quot;, &quot;qty&quot; : 75, &quot;size&quot; : &#123; &quot;h&quot; : 22.85, &quot;w&quot; : 30, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;D&quot; &#125;</span><br><span class="line">&gt;   </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询 status&#x3D;A or D 的数据</span><br><span class="line">&gt; db.inventory.find( &#123; status: &#123; $in: [ &quot;A&quot;, &quot;D&quot; ] &#125; &#125; )</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11303&quot;), &quot;item&quot; : &quot;journal&quot;, &quot;qty&quot; : 25, &quot;size&quot; : &#123; &quot;h&quot; : 14, &quot;w&quot; : 21, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11304&quot;), &quot;item&quot; : &quot;notebook&quot;, &quot;qty&quot; : 50, &quot;size&quot; : &#123; &quot;h&quot; : 8.5, &quot;w&quot; : 11, &quot;uom&quot; : &quot;in&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11305&quot;), &quot;item&quot; : &quot;paper&quot;, &quot;qty&quot; : 100, &quot;size&quot; : &#123; &quot;h&quot; : 8.5, &quot;w&quot; : 11, &quot;uom&quot; : &quot;in&quot; &#125;, &quot;status&quot; : &quot;D&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11306&quot;), &quot;item&quot; : &quot;planner&quot;, &quot;qty&quot; : 75, &quot;size&quot; : &#123; &quot;h&quot; : 22.85, &quot;w&quot; : 30, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;D&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11307&quot;), &quot;item&quot; : &quot;postcard&quot;, &quot;qty&quot; : 45, &quot;size&quot; : &#123; &quot;h&quot; : 10, &quot;w&quot; : 15.25, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&gt;   </span><br><span class="line">等价于：SELECT * FROM inventory WHERE status in (&quot;A&quot;, &quot;D&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询 status&#x3D;A and qty&lt;30 的数据</span><br><span class="line">&gt; db.inventory.find( &#123; status: &quot;A&quot;, qty: &#123; $lt: 30 &#125; &#125; )</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11303&quot;), &quot;item&quot; : &quot;journal&quot;, &quot;qty&quot; : 25, &quot;size&quot; : &#123; &quot;h&quot; : 14, &quot;w&quot; : 21, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&gt;  </span><br><span class="line">等价于：SELECT * FROM inventory WHERE status &#x3D; &quot;A&quot; AND qty &lt; 30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询 status&#x3D;A or qty&lt;30 的数据</span><br><span class="line">&gt; db.inventory.find( &#123; $or: [ &#123; status: &quot;A&quot; &#125;, &#123; qty: &#123; $lt: 30 &#125; &#125; ] &#125; )</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11303&quot;), &quot;item&quot; : &quot;journal&quot;, &quot;qty&quot; : 25, &quot;size&quot; : &#123; &quot;h&quot; : 14, &quot;w&quot; : 21, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11304&quot;), &quot;item&quot; : &quot;notebook&quot;, &quot;qty&quot; : 50, &quot;size&quot; : &#123; &quot;h&quot; : 8.5, &quot;w&quot; : 11, &quot;uom&quot; : &quot;in&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11307&quot;), &quot;item&quot; : &quot;postcard&quot;, &quot;qty&quot; : 45, &quot;size&quot; : &#123; &quot;h&quot; : 10, &quot;w&quot; : 15.25, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&gt;   </span><br><span class="line">等价于：SELECT * FROM inventory WHERE status &#x3D; &quot;A&quot; OR qty &lt; 30</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">查询 status&#x3D;A and (qty&lt;30 or item以p开头) 的数据</span><br><span class="line">&gt; db.inventory.find( &#123;</span><br><span class="line">...      status: &quot;A&quot;,</span><br><span class="line">...      $or: [ &#123; qty: &#123; $lt: 30 &#125; &#125;, &#123; item: &#x2F;^p&#x2F; &#125; ]</span><br><span class="line">... &#125; )</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11303&quot;), &quot;item&quot; : &quot;journal&quot;, &quot;qty&quot; : 25, &quot;size&quot; : &#123; &quot;h&quot; : 14, &quot;w&quot; : 21, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5e6d2551c5e27d91ace11307&quot;), &quot;item&quot; : &quot;postcard&quot;, &quot;qty&quot; : 45, &quot;size&quot; : &#123; &quot;h&quot; : 10, &quot;w&quot; : 15.25, &quot;uom&quot; : &quot;cm&quot; &#125;, &quot;status&quot; : &quot;A&quot; &#125;</span><br><span class="line">&gt;   </span><br><span class="line">等价于：SELECT * FROM inventory WHERE status &#x3D; &quot;A&quot; AND ( qty &lt; 30 OR item LIKE &quot;p%&quot;)</span><br></pre></td></tr></table></figure>

<h5 id="更新一条数据"><a href="#更新一条数据" class="headerlink" title="更新一条数据"></a>更新一条数据</h5><p>官方文档：<a href="https://docs.mongodb.com/manual/reference/update-methods/" target="_blank" rel="noopener">Update Methods</a>  </p>
]]></content>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Flask入门</title>
    <url>/2020/03/12/Flask%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h5 id="一个最小的应用"><a href="#一个最小的应用" class="headerlink" title="一个最小的应用"></a>一个最小的应用</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 导入 Flask 类，该类的实例成为我们的 WSGI 应用</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 Flask 类的实例。第一个参数是应用模块或者包的名称</span></span><br><span class="line"><span class="comment"># 若使用一个单一模块（就像本例），则使用 __name__</span></span><br><span class="line"><span class="comment"># 名称根据模块是按应用方式使用或作为模块导入而变化</span></span><br><span class="line"><span class="comment"># （可能是 '__main__' 或实际导入的名称）</span></span><br><span class="line"><span class="comment"># 此参数是必需的，这样 Flask 才知道在哪里能找到模板和静态文件等东西</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 route() 装饰器把函数绑定到 URL:</span></span><br><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Hello, World'</span></span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/8myzWR" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8myzWR.png" alt="8myzWR.png"></a></p>
<h5 id="变量规则"><a href="#变量规则" class="headerlink" title="变量规则"></a>变量规则</h5><p>通过把 URL 的一部分标记为 &#60;variable_name&#62; 就可以在 URL 中添加变量。标记的部分会作为关键字参数传递给函数。通过使用 &#60;converter:variable_name&#62; ，可以选择性的加上一个转换器，为变量指定规则。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/user/&lt;username&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_user_profile</span><span class="params">(username)</span>:</span></span><br><span class="line">    <span class="comment"># show the user profile for that user</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'User &#123;&#125;'</span>.format(username)</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/8m6POK" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8m6POK.png" alt="8m6POK.png"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/post/&lt;int:post_id&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_post</span><span class="params">(post_id)</span>:</span></span><br><span class="line">    <span class="comment"># show the post with the given id, the id is an integer</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Post &#123;&#125;'</span>.format(post_id)</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/8m6Cy6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8m6Cy6.png" alt="8m6Cy6.png"></a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/path/&lt;path:subpath&gt;')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_subpath</span><span class="params">(subpath)</span>:</span></span><br><span class="line">    <span class="comment"># show the subpath after /path/</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'Subpath &#123;&#125;'</span>.format(subpath)</span><br></pre></td></tr></table></figure>
<p><a href="https://imgchr.com/i/8myvFJ" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8myvFJ.png" alt="8myvFJ.png"></a></p>
<h5 id="唯一的-URL-重定向行为"><a href="#唯一的-URL-重定向行为" class="headerlink" title="唯一的 URL / 重定向行为"></a>唯一的 URL / 重定向行为</h5><p>以下两条规则的不同之处在于是否使用尾部的斜杠。:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/projects/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">projects</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'The project page'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/about')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">about</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'The about page'</span></span><br></pre></td></tr></table></figure>
<p>projects 的 URL 是中规中矩的，尾部有一个斜杠，如同文件夹。 访问一个没有斜杠结尾的 URL 时 Flask 会自动进行重定并尾部加上一个斜杠。</p>
<p>about 的 URL 没有尾部斜杠，与文件类似。如果访问这个 URL 时添加了尾部斜杠就会得到一个 404 错误。这样可以保持 URL 唯一，并帮助搜索引擎避免重复索引同一页面。<br><a href="https://imgchr.com/i/8m6R6x" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/12/8m6R6x.png" alt="8m6R6x.png"></a></p>
<table>
<thead>
<tr>
<th align="left"></th>
<th align="center"></th>
</tr>
</thead>
<tbody><tr>
<td align="left">sting</td>
<td align="center">（缺省值） 接受任何不包含斜杠的文本</td>
</tr>
<tr>
<td align="left">int</td>
<td align="center">接受正整数</td>
</tr>
<tr>
<td align="left">float</td>
<td align="center">接受正浮点数</td>
</tr>
<tr>
<td align="left">path</td>
<td align="center">类似 string ，但可以包含斜杠</td>
</tr>
<tr>
<td align="left">uuid</td>
<td align="center">接受 UUID 字符串</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>关于Python __name__</title>
    <url>/2020/03/12/%E5%85%B3%E4%BA%8EPython-name/</url>
    <content><![CDATA[<h5 id="关于-name"><a href="#关于-name" class="headerlink" title="关于 __ name__"></a>关于 __ <strong>name__</strong></h5><p>__ <strong>name__</strong> 属于 python 的内置类属性，它天生存在于一个 python 程序中，代表对应程序名称。  </p>
<p>比如下面的代码里面（app.py），当运行此代码时，这个代码的 <strong>name</strong> 的值为 <strong>main</strong> （一段程序作为主线运行程序时其内置名称就是 <strong>main</strong>）。  </p>
<p>文件夹目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">folder</span><br><span class="line">│</span><br><span class="line">└─── __init__.py</span><br><span class="line">│</span><br><span class="line">└─── app.py</span><br><span class="line">│</span><br><span class="line">└─── task_name.py</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(__name__)</span><br><span class="line">&gt;&gt;&gt;__main__</span><br></pre></td></tr></table></figure>
<p>当 app.py 作为模块被 (task_name.py) 调用时，则它的 <strong>name</strong> 就是它自己的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># task_name.py</span></span><br><span class="line"><span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">print(app.__name__)</span><br><span class="line">&gt;&gt;&gt;app</span><br></pre></td></tr></table></figure>
<p>自己的 __ <strong>name__</strong> 在自己用时就是 main，当自己作为模块被调用时就是自己的名字。  </p>
<h5 id="实际项目的应用"><a href="#实际项目的应用" class="headerlink" title="实际项目的应用"></a>实际项目的应用</h5><p>如果在a.py里写了一个函数并且写了测试用例a_test， 运行a.py会显示测试用例a_test的结果。在b.py导入a并在b.py写了测试用例b_test，如果直接运行b.py会返回a_test和b_test的结果。显然a_test的结果不是我们想要的，我们只需要在b.py的b_test之前加上“if __ <strong>name__</strong> == __ <strong>name__</strong>:”，这样就不会返回a_test的结果了。</p>
]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>SQLAlchemy的基本使用</title>
    <url>/2020/03/11/SQLAlchemy%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>数据库表是一个二维表，包含多行多列。用Python的数据结构表示表的数据，可以用一个list表示多行，list的每一个元素是tuple，表示一行记录，比如，包含id和name的user表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">   (<span class="string">'1'</span>, <span class="string">'Michael'</span>),</span><br><span class="line">   (<span class="string">'2'</span>, <span class="string">'Bob'</span>),</span><br><span class="line">   (<span class="string">'3'</span>, <span class="string">'Adam'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Python的DB-API返回的数据结构如上所示。<br>但用tuple表示一行很难看出表的结构。如果把一个tuple用class实例来表示，就可以更容易地看出表的结构来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, id, name)</span>:</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    User(<span class="string">'1'</span>, <span class="string">'Michael'</span>),</span><br><span class="line">    User(<span class="string">'2'</span>, <span class="string">'Bob'</span>),</span><br><span class="line">    User(<span class="string">'3'</span>, <span class="string">'Adam'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这就是ORM技术(Object-Relational Mapping)，把关系数据库的表结构映射到对象上。由ORM框架来做转换。<br>Python中最有名的ORM框架是SQLAlchemy。以下是SQLAlchemy的常用用法。   </p>
<h6 id="Install-SQLAlchemy-via-pip"><a href="#Install-SQLAlchemy-via-pip" class="headerlink" title="Install SQLAlchemy via pip:"></a>Install SQLAlchemy via pip:</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ pip install sqlalchemy</span><br></pre></td></tr></table></figure>
<h6 id="Version-Check"><a href="#Version-Check" class="headerlink" title="Version Check:"></a>Version Check:</h6><p>A quick check to verify that we are on at least version 1.3 of SQLAlchemy:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sqlalchemy.__version__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.3</span><span class="number">.14</span></span><br></pre></td></tr></table></figure>
<h6 id="Connecting"><a href="#Connecting" class="headerlink" title="Connecting:"></a>Connecting:</h6><p>To connect we use create_engine():</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root : MySQL username</span></span><br><span class="line"><span class="comment"># mysql://root:(MySQL password, if the password is '', add nothing)</span></span><br><span class="line"><span class="comment"># news_test: the new defined database name</span></span><br><span class="line">engine = create_engine(<span class="string">'mysql://root:@localhost:3306/news_test?charset=utf8'</span>)</span><br></pre></td></tr></table></figure>
<p>The return value of create_engine() is an instance of Engine, and it represents the core interface to the database, adapted through a dialect that handles the details of the database and DBAPI in use. In this case the MySQL dialect will interpret instructions to the Python built-in MySQL module.</p>
<h6 id="Declare-a-Mapping"><a href="#Declare-a-Mapping" class="headerlink" title="Declare a Mapping:"></a>Declare a Mapping:</h6><p>When using the ORM, the configurational process starts by describing the database tables we’ll be dealing with, and then by defining our own classes which will be mapped to those tables. In modern SQLAlchemy, these two tasks are usually performed together, using a system known as Declarative, which allows us to create classes that include directives to describe the actual database table they will be mapped to.</p>
<p>Classes mapped using the Declarative system are defined in terms of a base class which maintains a catalog of classes and tables relative to that base - this is known as the declarative base class. Our application will usually have just one instance of this base in a commonly imported module. We create the base class using the declarative_base() function, as follows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Base = declarative_base()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, DateTime, Boolean</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'mysql://root:@localhost:3306/news_test?charset=utf8'</span>)</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">News</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"news"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">200</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = Column(String(<span class="number">2000</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    types = Column(String(<span class="number">10</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    image = Column(String(<span class="number">300</span>), )</span><br><span class="line">    author = Column(String(<span class="number">20</span>), )</span><br><span class="line">    view_count = Column(Integer)</span><br><span class="line">    created_at = Column(DateTime)</span><br><span class="line">    is_valid = Column(Boolean)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrmTest</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.session = Session()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        new_obj = News(</span><br><span class="line">            title=<span class="string">'标题'</span>,</span><br><span class="line">            content=<span class="string">'内容'</span>,</span><br><span class="line">            types=<span class="string">'百家'</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.session.add(new_obj)</span><br><span class="line">        self.session.commit()</span><br><span class="line">        <span class="keyword">return</span> new_obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""查询一条数据"""</span></span><br><span class="line">        <span class="keyword">return</span> self.session.query(News).get(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_more</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""查询多条数据"""</span></span><br><span class="line">        <span class="keyword">return</span> self.session.query(News).filter_by(is_valid=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_data</span><span class="params">(self, pk)</span>:</span></span><br><span class="line">        <span class="string">"""修改数据"""</span></span><br><span class="line">        new_obj = self.session.query(News).get(pk)</span><br><span class="line">        <span class="keyword">if</span> new_obj:</span><br><span class="line">            new_obj.is_valid = <span class="number">0</span></span><br><span class="line">            self.session.add(new_obj)</span><br><span class="line">            self.session.commit()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    obj = OrmTest()</span><br><span class="line">    <span class="comment"># res = obj.add_one()</span></span><br><span class="line">    print(obj.update_data(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>Database</tag>
      </tags>
  </entry>
</search>

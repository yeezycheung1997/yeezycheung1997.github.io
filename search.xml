<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关于Python __name__</title>
    <url>/2020/03/12/%E5%85%B3%E4%BA%8EPython-name/</url>
    <content><![CDATA[<h5 id="关于-name"><a href="#关于-name" class="headerlink" title="关于 __ name__"></a>关于 __ <strong>name__</strong></h5><p>__ <strong>name__</strong> 属于 python 的内置类属性，它天生存在于一个 python 程序中，代表对应程序名称。  </p>
<p>比如下面的代码里面（app.py），当运行此代码时，这个代码的 <strong>name</strong> 的值为 <strong>main</strong> （一段程序作为主线运行程序时其内置名称就是 <strong>main</strong>）。  </p>
<p>文件夹目录结构</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">folder</span><br><span class="line">│</span><br><span class="line">└─── __init__.py</span><br><span class="line">│</span><br><span class="line">└─── app.py</span><br><span class="line">│</span><br><span class="line">└─── task_name.py</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># app.py</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(__name__)</span><br><span class="line">&gt;&gt;&gt;__main__</span><br></pre></td></tr></table></figure>
<p>当 app.py 作为模块被 (task_name.py) 调用时，则它的 <strong>name</strong> 就是它自己的名字</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># task_name.py</span></span><br><span class="line"><span class="keyword">import</span> app</span><br><span class="line"></span><br><span class="line">print(app.__name__)</span><br><span class="line">&gt;&gt;&gt;app</span><br></pre></td></tr></table></figure>
<p>自己的 __ <strong>name__</strong> 在自己用时就是 main，当自己作为模块被调用时就是自己的名字。  </p>
<h5 id="实际项目的应用"><a href="#实际项目的应用" class="headerlink" title="实际项目的应用"></a>实际项目的应用</h5><p>如果在a.py里写了一个函数并且写了测试用例a_test， 运行a.py会显示测试用例a_test的结果。在b.py导入a并在b.py写了测试用例b_test，如果直接运行b.py会返回a_test和b_test的结果。显然a_test的结果不是我们想要的，我们只需要在b.py的b_test之前加上“if __ <strong>name__</strong> == __ <strong>name__</strong>:”，这样就不会返回a_test的结果了。</p>
]]></content>
  </entry>
  <entry>
    <title>SQLAlchemy的基本使用</title>
    <url>/2020/03/11/SQLAlchemy%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>数据库表是一个二维表，包含多行多列。用Python的数据结构表示表的数据，可以用一个list表示多行，list的每一个元素是tuple，表示一行记录，比如，包含id和name的user表：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">   (<span class="string">'1'</span>, <span class="string">'Michael'</span>),</span><br><span class="line">   (<span class="string">'2'</span>, <span class="string">'Bob'</span>),</span><br><span class="line">   (<span class="string">'3'</span>, <span class="string">'Adam'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>Python的DB-API返回的数据结构如上所示。<br>但用tuple表示一行很难看出表的结构。如果把一个tuple用class实例来表示，就可以更容易地看出表的结构来：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, id, name)</span>:</span></span><br><span class="line">        self.id = id</span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">    User(<span class="string">'1'</span>, <span class="string">'Michael'</span>),</span><br><span class="line">    User(<span class="string">'2'</span>, <span class="string">'Bob'</span>),</span><br><span class="line">    User(<span class="string">'3'</span>, <span class="string">'Adam'</span>)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>这就是ORM技术(Object-Relational Mapping)，把关系数据库的表结构映射到对象上。由ORM框架来做转换。<br>Python中最有名的ORM框架是SQLAlchemy。以下是SQLAlchemy的常用用法。   </p>
<h6 id="Install-SQLAlchemy-via-pip"><a href="#Install-SQLAlchemy-via-pip" class="headerlink" title="Install SQLAlchemy via pip:"></a>Install SQLAlchemy via pip:</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ pip install sqlalchemy</span><br></pre></td></tr></table></figure>
<h6 id="Version-Check"><a href="#Version-Check" class="headerlink" title="Version Check:"></a>Version Check:</h6><p>A quick check to verify that we are on at least version 1.3 of SQLAlchemy:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sqlalchemy</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sqlalchemy.__version__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1.3</span><span class="number">.14</span></span><br></pre></td></tr></table></figure>
<h6 id="Connecting"><a href="#Connecting" class="headerlink" title="Connecting:"></a>Connecting:</h6><p>To connect we use create_engine():</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># root : MySQL username</span></span><br><span class="line"><span class="comment"># mysql://root:(MySQL password, if the password is '', add nothing)</span></span><br><span class="line"><span class="comment"># news_test: the new defined database name</span></span><br><span class="line">engine = create_engine(<span class="string">'mysql://root:@localhost:3306/news_test?charset=utf8'</span>)</span><br></pre></td></tr></table></figure>
<p>The return value of create_engine() is an instance of Engine, and it represents the core interface to the database, adapted through a dialect that handles the details of the database and DBAPI in use. In this case the MySQL dialect will interpret instructions to the Python built-in MySQL module.</p>
<h6 id="Declare-a-Mapping"><a href="#Declare-a-Mapping" class="headerlink" title="Declare a Mapping:"></a>Declare a Mapping:</h6><p>When using the ORM, the configurational process starts by describing the database tables we’ll be dealing with, and then by defining our own classes which will be mapped to those tables. In modern SQLAlchemy, these two tasks are usually performed together, using a system known as Declarative, which allows us to create classes that include directives to describe the actual database table they will be mapped to.</p>
<p>Classes mapped using the Declarative system are defined in terms of a base class which maintains a catalog of classes and tables relative to that base - this is known as the declarative base class. Our application will usually have just one instance of this base in a commonly imported module. We create the base class using the declarative_base() function, as follows:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Base = declarative_base()</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> create_engine</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.orm <span class="keyword">import</span> sessionmaker</span><br><span class="line"><span class="keyword">from</span> sqlalchemy.ext.declarative <span class="keyword">import</span> declarative_base</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> Column, Integer, String, DateTime, Boolean</span><br><span class="line"></span><br><span class="line">engine = create_engine(<span class="string">'mysql://root:@localhost:3306/news_test?charset=utf8'</span>)</span><br><span class="line">Base = declarative_base()</span><br><span class="line"></span><br><span class="line">Session = sessionmaker(bind=engine)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">News</span><span class="params">(Base)</span>:</span></span><br><span class="line">    __tablename__ = <span class="string">"news"</span></span><br><span class="line">    id = Column(Integer, primary_key=<span class="literal">True</span>)</span><br><span class="line">    title = Column(String(<span class="number">200</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    content = Column(String(<span class="number">2000</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    types = Column(String(<span class="number">10</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    image = Column(String(<span class="number">300</span>), )</span><br><span class="line">    author = Column(String(<span class="number">20</span>), )</span><br><span class="line">    view_count = Column(Integer)</span><br><span class="line">    created_at = Column(DateTime)</span><br><span class="line">    is_valid = Column(Boolean)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrmTest</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.session = Session()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        new_obj = News(</span><br><span class="line">            title=<span class="string">'标题'</span>,</span><br><span class="line">            content=<span class="string">'内容'</span>,</span><br><span class="line">            types=<span class="string">'百家'</span>,</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">        self.session.add(new_obj)</span><br><span class="line">        self.session.commit()</span><br><span class="line">        <span class="keyword">return</span> new_obj</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_one</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""查询一条数据"""</span></span><br><span class="line">        <span class="keyword">return</span> self.session.query(News).get(<span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_more</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""查询多条数据"""</span></span><br><span class="line">        <span class="keyword">return</span> self.session.query(News).filter_by(is_valid=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update_data</span><span class="params">(self, pk)</span>:</span></span><br><span class="line">        <span class="string">"""修改数据"""</span></span><br><span class="line">        new_obj = self.session.query(News).get(pk)</span><br><span class="line">        <span class="keyword">if</span> new_obj:</span><br><span class="line">            new_obj.is_valid = <span class="number">0</span></span><br><span class="line">            self.session.add(new_obj)</span><br><span class="line">            self.session.commit()</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    obj = OrmTest()</span><br><span class="line">    <span class="comment"># res = obj.add_one()</span></span><br><span class="line">    print(obj.update_data(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>article</title>
    <url>/2020/03/10/article/</url>
    <content><![CDATA[<h1 id="测试文章"><a href="#测试文章" class="headerlink" title="测试文章"></a>测试文章</h1><h2 id="测试段落"><a href="#测试段落" class="headerlink" title="测试段落"></a>测试段落</h2>]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>导航</tag>
        <tag>分享</tag>
      </tags>
  </entry>
</search>
